//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Digi.XBee.Internal.Protocol
{
    
    
    /// <summary>
    /// Class to implement the XBee command " AT Queue Parameter ".
    /// This frame allows you to query or set device parameters. In contrast to the AT Command (0x08)
    /// frame, this frame queues new parameter values and does not apply them until you issue either:
    /// n The AT Command (0x08) frame (for API type) n The AC command When querying parameter values,
    /// the 0x09 frame behaves identically to the 0x08 frame. The device returns register queries
    /// immediately and not does not queue them. The response for this command is also an AT Command
    /// Response frame (0x88). 
    /// This class provides methods for processing XBee API commands.
    /// </summary>
    public class XBeeAtQueueParameterCommand : XBeeFrame, IXBeeCommand 
    {
        
        /// <summary>
        ///  The frame Id 
        /// </summary>
        private int _frameId;
        
        /// <summary>
        ///  Command name: two ASCII characters that identify the AT command. 
        /// </summary>
        private string _atCommand;
        
        /// <summary>
        ///  If present, indicates the requested parameter value to set the given register. If no
        /// characters are present, it queries the register. 
        /// </summary>
        private int[] _parameterValue;
        
        /// <summary>
        /// The frameId to set as </summary>
        /// <seecref="uint8"
        ///>
        ///  </see>
        public void SetFrameId(int frameId)
        {
            _frameId = frameId;
        }
        
        /// <summary>
        /// The atCommand to set as </summary>
        /// <seecref="AtCommand"
        ///>
        ///  </see>
        public void SetAtCommand(string atCommand)
        {
            _atCommand = atCommand;
        }
        
        /// <summary>
        /// The parameterValue to set as </summary>
        /// <seecref="Data"
        ///>
        ///  </see>
        public void SetParameterValue(int[] parameterValue)
        {
            _parameterValue = parameterValue;
        }
        
        /// <summary>
        /// Method for serializing the command fields </summary>
        public int[] Serialize()
        {
            SerializeCommand(9);
            SerializeInt8(_frameId);
            SerializeAtCommand(_atCommand);
            SerializeData(_parameterValue);
            return GetPayload();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder(387);
            builder.Append("XBeeAtQueueParameterCommand [frameId=");
            builder.Append(_frameId);
            builder.Append(", atCommand=");
            builder.Append(_atCommand);
            builder.Append(", parameterValue=");
            if (_parameterValue == null)
            {
                builder.Append("null");
            }
            else
            {
                for (int cnt = 0
                ; cnt < _parameterValue.Length; cnt++
                )
                {
                    if (cnt > 0)
                    {
                        builder.Append(' ');
                    }
                    builder.Append(string.Format("0x{0:X2}", _parameterValue[cnt]));
                }
            }
            builder.Append(']');
            return builder.ToString();
        }
    }
}
