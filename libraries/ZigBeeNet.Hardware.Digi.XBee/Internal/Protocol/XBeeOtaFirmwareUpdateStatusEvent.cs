//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Digi.XBee.Internal.Protocol
{
    
    
    /// <summary>
    /// Class to implement the XBee command " OTA Firmware Update Status ".
    /// The Over-the-Air Firmware Update Status frame provides an indication of the status of a
    /// firmware update transmission attempt. A query command (0x01 0x51) sent to a target with a
    /// 64-bit address of 0x0013A200 40522BAA through an updater with 64-bit address
    /// 0x0013A200403E0750 and 16-bit address 0x0000, generates the following expected
    /// response. 
    /// This class provides methods for processing XBee API commands.
    /// </summary>
    public class XBeeOtaFirmwareUpdateStatusEvent : XBeeFrame, IXBeeEvent
    {
        
        /// <summary>
        /// Response field
        /// MSB first, LSB last. The address of the remote radio returning this response. 
        /// </summary>
        private IeeeAddress _ieeeAddress;
        
        /// <summary>
        /// Response field
        /// The 16-bit address of the updater device.
        /// </summary>
        private int _networkAddress;
        
        /// <summary>
        /// Response field
        /// </summary>
        private ReceiveOptions _receiveOptions;
        
        /// <summary>
        /// Response field
        /// Block number used in the update request. Set to 0 if not applicable. 
        /// </summary>
        private int _blockNumber;
        
        /// <summary>
        /// Response field
        /// The 64-bit Address of remote device that is being updated (target) 
        /// </summary>
        private IeeeAddress _targetAddress;
        
        /// <summary>
        ///  MSB first, LSB last. The address of the remote radio returning this response. 
        /// Return the ieeeAddress as <see cref="IeeeAddress"/>
        /// </summary>
        public IeeeAddress GetIeeeAddress()
        {
            return _ieeeAddress;
        }
        
        /// <summary>
        ///  The 16-bit address of the updater device.
        /// Return the networkAddress as <see cref="System.Int32"/>
        /// </summary>
        public int GetNetworkAddress()
        {
            return _networkAddress;
        }
        
        /// <summary>
        ///  Return the receiveOptions as <see cref="ReceiveOptions"/>
        /// </summary>
        public ReceiveOptions GetReceiveOptions()
        {
            return _receiveOptions;
        }
        
        /// <summary>
        ///  Block number used in the update request. Set to 0 if not applicable. 
        /// Return the blockNumber as <see cref="System.Int32"/>
        /// </summary>
        public int GetBlockNumber()
        {
            return _blockNumber;
        }
        
        /// <summary>
        ///  The 64-bit Address of remote device that is being updated (target) 
        /// Return the targetAddress as <see cref="IeeeAddress"/>
        /// </summary>
        public IeeeAddress GetTargetAddress()
        {
            return _targetAddress;
        }
        
        /// <summary>
        /// Method for deserializing the fields for the response </summary>
        public void Deserialize(int[] incomingData)
        {
            InitializeDeserializer(incomingData);
            _ieeeAddress = DeserializeIeeeAddress();
            _networkAddress = DeserializeInt16();
            _receiveOptions = DeserializeReceiveOptions();
            int bootloaderMessageType = DeserializeInt8();
            _blockNumber = DeserializeInt8();
            _targetAddress = DeserializeIeeeAddress();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder(662);
            builder.Append("XBeeOtaFirmwareUpdateStatusEvent [ieeeAddress=");
            builder.Append(_ieeeAddress);
            builder.Append(", networkAddress=");
            builder.Append(_networkAddress);
            builder.Append(", receiveOptions=");
            builder.Append(_receiveOptions);
            builder.Append(", blockNumber=");
            builder.Append(_blockNumber);
            builder.Append(", targetAddress=");
            builder.Append(_targetAddress);
            builder.Append(']');
            return builder.ToString();
        }
    }
}
