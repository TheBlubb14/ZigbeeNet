//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZigBeeNet.Hardware.Digi.XBee.Internal.Protocol
{
    
    
    /// <summary>
    /// Class to implement the XBee command " Create Source Route ".
    /// This frame creates a source route in the device. A source route specifies the complete route a
    /// packet traverses to get from source to destination. For best results, use source routing
    /// with many-to-one routing. There is no response frame for this frame type. Take care when
    /// generating source routes. An incorrectly formatted frame will be silently rejected by the
    /// radio or cause unexpected results. 
    /// This class provides methods for processing XBee API commands.
    /// </summary>
    public class XBeeCreateSourceRouteCommand : XBeeFrame, IXBeeCommand 
    {
        
        /// <summary>
        ///  The frame Id 
        /// </summary>
        private int _frameId;
        
        /// <summary>
        ///  64-bit destination address. MSB first, LSB last. Set to the 64-bit address of the
        /// destination device. Reserved 64-bit address for the coordinator = 0x0000000000000000
        /// Broadcast = 0x000000000000FFFF. 
        /// </summary>
        private IeeeAddress _ieeeAddress;
        
        /// <summary>
        ///  16-bit destination network address. Set to the 16-bit address of the destination device, if
        /// known. If the address is unknown or if sending a broadcast, set to 0xFFFE. 
        /// </summary>
        private int _networkAddress;
        
        /// <summary>
        ///  </summary>
        private int[] _addressList;
        
        /// <summary>
        /// The frameId to set as </summary>
        /// <seecref="uint8"
        ///>
        ///  </see>
        public void SetFrameId(int frameId)
        {
            _frameId = frameId;
        }
        
        /// <summary>
        /// The ieeeAddress to set as </summary>
        /// <seecref="IeeeAddress"
        ///>
        ///  </see>
        public void SetIeeeAddress(IeeeAddress ieeeAddress)
        {
            _ieeeAddress = ieeeAddress;
        }
        
        /// <summary>
        /// The networkAddress to set as </summary>
        /// <seecref="uint16"
        ///>
        ///  </see>
        public void SetNetworkAddress(int networkAddress)
        {
            _networkAddress = networkAddress;
        }
        
        /// <summary>
        /// The addressList to set as </summary>
        /// <seecref="uint16[]"
        ///>
        ///  </see>
        public void SetAddressList(int[] addressList)
        {
            _addressList = addressList;
        }
        
        /// <summary>
        /// Method for serializing the command fields </summary>
        public int[] Serialize()
        {
            SerializeCommand(33);
            SerializeInt8(_frameId);
            SerializeIeeeAddress(_ieeeAddress);
            SerializeInt16(_networkAddress);
            SerializeInt8(0);
            SerializeInt8(_addressList.Length);
            SerializeInt16Array(_addressList);
            return GetPayload();
        }
        
        public override string ToString()
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder(658);
            builder.Append("XBeeCreateSourceRouteCommand [frameId=");
            builder.Append(_frameId);
            builder.Append(", ieeeAddress=");
            builder.Append(_ieeeAddress);
            builder.Append(", networkAddress=");
            builder.Append(_networkAddress);
            builder.Append(", addressList=");
            if (_addressList == null)
            {
                builder.Append("null");
            }
            else
            {
                for (int cnt = 0
                ; cnt < _addressList.Length; cnt++
                )
                {
                    if (cnt > 0)
                    {
                        builder.Append(' ');
                    }
                    builder.Append(string.Format("0x{0:X4}", _addressList[cnt]));
                }
            }
            builder.Append(']');
            return builder.ToString();
        }
    }
}
