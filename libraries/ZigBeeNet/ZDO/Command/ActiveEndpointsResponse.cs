using System;
using System.Collections.Generic;
using System.Text;
using ZigBeeNet.ZCL;
using ZigBeeNet.ZCL.Protocol;

namespace ZigBeeNet.ZDO.Command
{
    /// <summary>
     /// Active Endpoints Response value object class.
     /// 
     /// The Active_EP_rsp is generated by a remote device in response to an
     /// Active_EP_req directed to the remote device. This command shall be unicast to
     /// the originator of the Active_EP_req command.
     /// </summary>
    public class ActiveEndpointsResponse : ZdoResponse
    {
        /// <summary>
         /// NWKAddrOfInterest command message field.
         /// </summary>
        public ushort NwkAddrOfInterest { get; set; }

        /// <summary>
         /// ActiveEPList command message field.
         /// </summary>
        public List<byte> ActiveEpList { get; set; }

        /// <summary>
         /// Default constructor.
         /// </summary>
        public ActiveEndpointsResponse()
        {
            ClusterId = 0x8005;
        }
       
        internal override void Serialize(ZclFieldSerializer serializer)
        {
            base.Serialize(serializer);

            serializer.Serialize(Status, ZclDataType.Get(DataType.ZDO_STATUS));
            serializer.Serialize(NwkAddrOfInterest, ZclDataType.Get(DataType.NWK_ADDRESS));
            serializer.Serialize(ActiveEpList.Count, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));

            for (int cnt = 0; cnt < ActiveEpList.Count; cnt++)
            {
                serializer.Serialize(ActiveEpList[cnt], ZclDataType.Get(DataType.ENDPOINT));
            }
        }

        internal override void Deserialize(ZclFieldDeserializer deserializer)
        {
            base.Deserialize(deserializer);

            // Create lists
            ActiveEpList = new List<byte>();

            Status = (ZdoStatus)deserializer.Deserialize(ZclDataType.Get(DataType.ZDO_STATUS));

            if (Status != ZdoStatus.SUCCESS)
            {
                // Don't read the full response if we have an error
                return;
            }

            NwkAddrOfInterest = (ushort)deserializer.Deserialize(ZclDataType.Get(DataType.NWK_ADDRESS));
            byte? activeEpCnt = (byte?)deserializer.Deserialize(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));

            if (activeEpCnt != null)
            {
                for (int cnt = 0; cnt < activeEpCnt; cnt++)
                {
                    ActiveEpList.Add((byte)deserializer.Deserialize(ZclDataType.Get(DataType.ENDPOINT)));
                }
            }
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();

            builder.Append("ActiveEndpointsResponse [")
                   .Append(base.ToString())
                   .Append(", status=")
                   .Append(Status)
                   .Append(", nwkAddrOfInterest=")
                   .Append(NwkAddrOfInterest)
                   .Append(", activeEpList=")
                   .Append(string.Join(", ", ActiveEpList))
                   .Append(']');

            return builder.ToString();
        }

    }
}
